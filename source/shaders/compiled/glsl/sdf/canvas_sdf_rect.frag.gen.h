// warning this file is generated by a tool do not modify

/* ===========================================================================
 *
 * Copyright (c) 2020-2021 Disney Streaming Technology LLC. All rights reserved.
 *
 * ==========================================================================*/

static const char canvas_sdf_rect_frag_bytes[] = 
"#version 100\n"
"#define GLSL_VERSION_100\n"
"#define GLSL_FRAG\n"
"\n"
"/*\n"
"shader_binding_locations.h\n"
"\n"
"macro definitions for sharing between glsl/c so enum values can be shared between core and shaders for uniform/texture binding locations.\n"
"*/\n"
"\n"
"#ifndef _SHADER_BINDING_LOCATIONS_HEADER_1234124412\n"
"#define _SHADER_BINDING_LOCATIONS_HEADER_1234124412\n"
"\n"
"#define U_MVP_BINDING 0\n"
"#define U_VIEWPORT_BINDING 1\n"
"#define U_TEX0_BINDING 2\n"
"#define U_TEX1_BINDING 3\n"
"#define U_FILL_BINDING 4\n"
"#define U_THRESHOLD_BINDING 5\n"
"#define U_RECT_ROUNDNESS_BINDING 6\n"
"#define U_RECT_BINDING 7\n"
"#define U_FADE_BINDING 8\n"
"#define U_STROKE_COLOR_BINDING 9\n"
"#define U_STROKE_SIZE_BINDING 10\n"
"#define U_LTEXSIZE_BINDING 11\n"
"#define U_CTEXSIZE_BINDING 12\n"
"#define U_FRAMESIZE_BINDING 13\n"
"#endif\n"
"\n"
"#ifdef GLSL_VERSION_450\n"
"#define LAYOUT(binding_declaration) layout(binding_declaration)\n"
"#define UNIFORM_STRUCT_DEF(struct_name, def) struct_name{def};\n"
"#ifdef GLSL_FRAG\n"
"out vec4 frag_color;\n"
"#define gl_FragColor frag_color\n"
"#endif\n"
"#else // glsl #version 100 support\n"
"#define LAYOUT(binding_declaration)\n"
"#define UNIFORM_STRUCT_DEF(struct_name, def) def\n"
"#ifndef GLSL_FRAG\n"
"#define in attribute\n"
"#define out varying\n"
"#else\n"
"#define in varying\n"
"#endif\n"
"#endif\n"
"\n"
"#ifndef GL_VERSION_450\n"
"precision mediump float;\n"
"#endif\n"
"\n"
"LAYOUT(binding = U_TEX0_BINDING) uniform sampler2D u_tex0;\n"
"LAYOUT(binding = U_FILL_BINDING) uniform UNIFORM_STRUCT_DEF(fill, vec4 u_fill;)\n"
"LAYOUT(binding = U_RECT_ROUNDNESS_BINDING) uniform UNIFORM_STRUCT_DEF(rect_roundness, float u_rect_roundness;)\n"
"LAYOUT(binding = U_RECT_BINDING) uniform UNIFORM_STRUCT_DEF(rect, vec4 u_rect;)\n"
"LAYOUT(binding = U_FADE_BINDING) uniform UNIFORM_STRUCT_DEF(fade, float u_fade;)\n"
"\n"
"in vec4 v_var;\n"
"in vec4 v_pos0;\n"
"\n"
"float sdf_rounded_box(vec2 box_origin, vec2 half_box, float radius, vec2 world_pos) {\n"
"    vec2 d = abs(world_pos - box_origin) - half_box + radius;\n"
"    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0) - radius;\n"
"}\n"
"\n"
"void main() {\n"
"    vec4 col = texture2D(u_tex0, v_var.xy);\n"
"\n"
"    float sdf_sample = sdf_rounded_box(u_rect.xy, u_rect.zw, u_rect_roundness, v_pos0.xy);\n"
"    float sdf_clamped = smoothstep(0.0, 1.0, -sdf_sample/u_fade);\n"
"    gl_FragColor = vec4((col * u_fill).rgb, col.a * v_var.a * sdf_clamped);\n"
"}\n"
;
static const const_mem_region_t canvas_sdf_rect_frag_program = {{.ptr = canvas_sdf_rect_frag_bytes}, .size = ARRAY_SIZE(canvas_sdf_rect_frag_bytes)};

