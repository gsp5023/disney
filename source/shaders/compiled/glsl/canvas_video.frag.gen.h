// warning this file is generated by a tool do not modify

/* ===========================================================================
 *
 * Copyright (c) 2020-2021 Disney Streaming Technology LLC. All rights reserved.
 *
 * ==========================================================================*/

static const char canvas_video_frag_bytes[] = 
"#version 100\n"
"#define GLSL_VERSION_100\n"
"#define GLSL_FRAG\n"
"\n"
"/*\n"
"shader_binding_locations.h\n"
"\n"
"macro definitions for sharing between glsl/c so enum values can be shared between core and shaders for uniform/texture binding locations.\n"
"*/\n"
"\n"
"#ifndef _SHADER_BINDING_LOCATIONS_HEADER_1234124412\n"
"#define _SHADER_BINDING_LOCATIONS_HEADER_1234124412\n"
"\n"
"#define U_MVP_BINDING 0\n"
"#define U_VIEWPORT_BINDING 1\n"
"#define U_TEX0_BINDING 2\n"
"#define U_TEX1_BINDING 3\n"
"#define U_FILL_BINDING 4\n"
"#define U_THRESHOLD_BINDING 5\n"
"#define U_RECT_ROUNDNESS_BINDING 6\n"
"#define U_RECT_BINDING 7\n"
"#define U_FADE_BINDING 8\n"
"#define U_STROKE_COLOR_BINDING 9\n"
"#define U_STROKE_SIZE_BINDING 10\n"
"#define U_LTEXSIZE_BINDING 11\n"
"#define U_CTEXSIZE_BINDING 12\n"
"#define U_FRAMESIZE_BINDING 13\n"
"#endif\n"
"\n"
"#ifdef GLSL_VERSION_450\n"
"#define LAYOUT(binding_declaration) layout(binding_declaration)\n"
"#define UNIFORM_STRUCT_DEF(struct_name, def) struct_name{def};\n"
"#ifdef GLSL_FRAG\n"
"out vec4 frag_color;\n"
"#define gl_FragColor frag_color\n"
"#endif\n"
"#else // glsl #version 100 support\n"
"#define LAYOUT(binding_declaration)\n"
"#define UNIFORM_STRUCT_DEF(struct_name, def) def\n"
"#ifndef GLSL_FRAG\n"
"#define in attribute\n"
"#define out varying\n"
"#else\n"
"#define in varying\n"
"#endif\n"
"#endif\n"
"\n"
"/*\n"
"canvas_video.frag\n"
"\n"
"cg(canvas) video fragment shader\n"
"*/\n"
"\n"
"#ifdef GL_ES\n"
"precision lowp float;\n"
"#endif\n"
"\n"
"LAYOUT(binding = U_TEX0_BINDING) uniform sampler2D u_tex0;\n"
"LAYOUT(binding = U_TEX1_BINDING) uniform sampler2D u_tex1;\n"
"\n"
"LAYOUT(binding = U_FILL_BINDING) uniform UNIFORM_STRUCT_DEF(fill, vec4 u_fill;)\n"
"\n"
"LAYOUT(binding = U_LTEXSIZE_BINDING) uniform UNIFORM_STRUCT_DEF(ltex_size, ivec2 u_ltex_size;)\n"
"LAYOUT(binding = U_CTEXSIZE_BINDING) uniform UNIFORM_STRUCT_DEF(ctex_size, ivec2 u_ctex_size;)\n"
"LAYOUT(binding = U_FRAMESIZE_BINDING) uniform UNIFORM_STRUCT_DEF(framesize, ivec2 u_framesize;)\n"
"\n"
"in vec4 v_var;\n"
"\n"
"void main() {\n"
"\n"
"    vec2 chroma_ratio = vec2(float(u_framesize.x / 2) / float(u_ctex_size.x), float(u_framesize.y / 2) / float(u_ctex_size.y));\n"
"    vec2 luma_ratio = vec2(float(u_framesize.x) / float(u_ltex_size.x), float(u_framesize.y) / float(u_ltex_size.y));\n"
"\n"
"    float alpha = v_var.a;\n"
"    vec2 chroma = texture2D(u_tex0, v_var.xy * chroma_ratio).rg;\n"
"    float luminance = texture2D(u_tex1, v_var.xy * luma_ratio).r;\n"
"    vec3 YCbCr = vec3(luminance, chroma);\n"
"\n"
"    YCbCr *= 1.0;\n"
"    YCbCr -= vec3(0.0625, 0.5, 0.5);\n"
"    \n"
"    vec3 rgb = vec3(dot(vec3(1.1644, 0.0, 1.7927), YCbCr), // R\n"
"                dot(vec3(1.1644, -0.2133, -0.5329), YCbCr), // G\n"
"                dot(vec3(1.1644, 2.1124, 0.0), YCbCr)); // B\n"
"                        \n"
"    gl_FragColor = vec4(rgb * u_fill.rgb, 1.0);\n"
"}\n"
;
static const const_mem_region_t canvas_video_frag_program = {{.ptr = canvas_video_frag_bytes}, .size = ARRAY_SIZE(canvas_video_frag_bytes)};

