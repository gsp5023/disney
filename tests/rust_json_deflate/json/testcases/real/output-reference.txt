Ok(Root { application: RootApplication { id: "", name: "" }, common_headers: RootCommonHeaders { x_bamsdk_client_id: "launchpad", x_bamsdk_platform: "{SDKPlatform}", x_bamsdk_version: "{SDKVersion}" }, logger: RootLogger { log_level: "debug" }, services: RootServices { account: RootServicesAccount { client: RootServicesAccountClient { base_url: "https://qa.us.edge.bamgrid.com", endpoints: RootServicesAccountClientEndpoints { create_account: RootServicesAccountClientEndpointsCreateAccount { headers: RootServicesAccountClientEndpointsCreateAccountHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/accounts", method: "POST", templated: false, timeout: 15, ttl: 0 }, create_account_grant: RootServicesAccountClientEndpointsCreateAccountGrant { headers: RootServicesAccountClientEndpointsCreateAccountGrantHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/accounts/grant", method: "POST", templated: false, timeout: 15, ttl: 0 }, create_user_profile: RootServicesAccountClientEndpointsCreateUserProfile { headers: RootServicesAccountClientEndpointsCreateUserProfileHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/accounts/me/profiles", method: "POST", templated: false, timeout: 15, ttl: 0 }, delete_account_attributes: RootServicesAccountClientEndpointsDeleteAccountAttributes { headers: RootServicesAccountClientEndpointsDeleteAccountAttributesHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/accounts/me/attributes", method: "DELETE", templated: false, timeout: 15, ttl: 0 }, delete_user_profile: RootServicesAccountClientEndpointsDeleteUserProfile { headers: RootServicesAccountClientEndpointsDeleteUserProfileHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/accounts/me/profiles/{profileId}", method: "DELETE", templated: true, timeout: 15, ttl: 0 }, get_active_user_profile: RootServicesAccountClientEndpointsGetActiveUserProfile { headers: RootServicesAccountClientEndpointsGetActiveUserProfileHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/accounts/me/active-profile", method: "GET", templated: false, timeout: 15, ttl: 0 }, get_current_account: RootServicesAccountClientEndpointsGetCurrentAccount { headers: RootServicesAccountClientEndpointsGetCurrentAccountHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/accounts/me", method: "GET", templated: false, timeout: 15, ttl: 0 }, get_user_profile: RootServicesAccountClientEndpointsGetUserProfile { headers: RootServicesAccountClientEndpointsGetUserProfileHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/accounts/me/profiles/{profileId}", method: "GET", templated: true, timeout: 15, ttl: 0 }, get_user_profiles: RootServicesAccountClientEndpointsGetUserProfiles { headers: RootServicesAccountClientEndpointsGetUserProfilesHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/accounts/me/profiles", method: "GET", templated: false, timeout: 15, ttl: 0 }, set_active_user_profile: RootServicesAccountClientEndpointsSetActiveUserProfile { headers: RootServicesAccountClientEndpointsSetActiveUserProfileHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/accounts/me/active-profile/{profileId}", method: "PUT", templated: true, timeout: 15, ttl: 0 }, update_account_attributes: RootServicesAccountClientEndpointsUpdateAccountAttributes { headers: RootServicesAccountClientEndpointsUpdateAccountAttributesHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/accounts/me/attributes", method: "PATCH", templated: false, timeout: 15, ttl: 0 }, update_user_profile: RootServicesAccountClientEndpointsUpdateUserProfile { headers: RootServicesAccountClientEndpointsUpdateUserProfileHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/accounts/me/profiles/{profileId}", method: "PATCH", templated: true, timeout: 15, ttl: 0 } } } }, ad_engine: RootServicesAdEngine { client: RootServicesAdEngineClient { base_url: "", endpoints: RootServicesAdEngineClientEndpoints { set_token: RootServicesAdEngineClientEndpointsSetToken { headers: RootServicesAdEngineClientEndpointsSetTokenHeaders { authorization: "Bearer {accessToken}" }, href: "", method: "GET", templated: false, timeout: 15, ttl: 0 }, set_token_redirect: RootServicesAdEngineClientEndpointsSetTokenRedirect { headers: RootServicesAdEngineClientEndpointsSetTokenRedirectHeaders { authorization: "Bearer {accessToken}" }, href: "", method: "GET", templated: false, timeout: 15, ttl: 0 } } }, disabled: true, extras: RootServicesAdEngineExtras { ad_targeting: RootServicesAdEngineExtrasAdTargeting } }, adobe_identity: RootServicesAdobeIdentity { client: RootServicesAdobeIdentityClient { base_url: "", endpoints: RootServicesAdobeIdentityClientEndpoints { create_id_token: RootServicesAdobeIdentityClientEndpointsCreateIdToken { headers: RootServicesAdobeIdentityClientEndpointsCreateIdTokenHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "", method: "POST", templated: false, timeout: 15, ttl: 0 }, create_registration_code: RootServicesAdobeIdentityClientEndpointsCreateRegistrationCode { headers: RootServicesAdobeIdentityClientEndpointsCreateRegistrationCodeHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "", method: "POST", templated: false, timeout: 15, ttl: 0 } } } }, bam_identity: RootServicesBamIdentity { client: RootServicesBamIdentityClient { base_url: "https://qa.us.edge.bamgrid.com", endpoints: RootServicesBamIdentityClientEndpoints { change_email: RootServicesBamIdentityClientEndpointsChangeEmail { headers: RootServicesBamIdentityClientEndpointsChangeEmailHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {identityToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/idp/email", method: "PATCH", templated: false, timeout: 15, ttl: 0 }, change_password: RootServicesBamIdentityClientEndpointsChangePassword { headers: RootServicesBamIdentityClientEndpointsChangePasswordHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {identityToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/idp/password", method: "PATCH", templated: false, timeout: 15, ttl: 0 }, check: RootServicesBamIdentityClientEndpointsCheck { headers: RootServicesBamIdentityClientEndpointsCheckHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/idp/check", method: "POST", templated: false, timeout: 15, ttl: 0 }, create_identity: RootServicesBamIdentityClientEndpointsCreateIdentity { headers: RootServicesBamIdentityClientEndpointsCreateIdentityHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/idp/register", method: "POST", templated: false, timeout: 15, ttl: 0 }, get_identity: RootServicesBamIdentityClientEndpointsGetIdentity { headers: RootServicesBamIdentityClientEndpointsGetIdentityHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {identityToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/idp/me", method: "GET", templated: false, timeout: 15, ttl: 0 }, identity_login: RootServicesBamIdentityClientEndpointsIdentityLogin { headers: RootServicesBamIdentityClientEndpointsIdentityLoginHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/idp/login", method: "POST", templated: false, timeout: 15, ttl: 0 }, otp_redeem: RootServicesBamIdentityClientEndpointsOtpRedeem { headers: RootServicesBamIdentityClientEndpointsOtpRedeemHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/idp/otp/redeem", method: "POST", templated: false, timeout: 15, ttl: 0 }, otp_request: RootServicesBamIdentityClientEndpointsOtpRequest { headers: RootServicesBamIdentityClientEndpointsOtpRequestHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/idp/otp/request", method: "POST", templated: false, timeout: 15, ttl: 0 }, reset_password: RootServicesBamIdentityClientEndpointsResetPassword { headers: RootServicesBamIdentityClientEndpointsResetPasswordHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/idp/password/reset/confirm", method: "POST", templated: false, timeout: 15, ttl: 0 }, start_password_reset: RootServicesBamIdentityClientEndpointsStartPasswordReset { headers: RootServicesBamIdentityClientEndpointsStartPasswordResetHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/idp/password/reset/request", method: "POST", templated: false, timeout: 15, ttl: 0 }, update_attributes: RootServicesBamIdentityClientEndpointsUpdateAttributes { headers: RootServicesBamIdentityClientEndpointsUpdateAttributesHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {identityToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/idp/me/attributes", method: "PATCH", templated: false, timeout: 15, ttl: 0 } } }, extras: RootServicesBamIdentityExtras { expiration_buffer_seconds: 15 } }, commerce: RootServicesCommerce { client: RootServicesCommerceClient { base_url: "https://qa.us.edge.bamgrid.com", endpoints: RootServicesCommerceClientEndpoints { create_klarna_payment_method: RootServicesCommerceClientEndpointsCreateKlarnaPaymentMethod { headers: RootServicesCommerceClientEndpointsCreateKlarnaPaymentMethodHeaders { accept: "application/json", authorization: "Bearer {accessToken}", content_type: "application/json" }, href: "https://qa.us.edge.bamgrid.com/commerceutilities/klarna/redirecturl", method: "POST", templated: false, timeout: 15, ttl: 0 }, create_pay_pal_payment_method: RootServicesCommerceClientEndpointsCreatePayPalPaymentMethod { headers: RootServicesCommerceClientEndpointsCreatePayPalPaymentMethodHeaders { accept: "application/json", authorization: "Bearer {accessToken}" }, href: "https://qa.us.edge.bamgrid.com/paypalToken/expressCheckoutDetails", method: "POST", templated: false, timeout: 15, ttl: 0 }, create_payment_method: RootServicesCommerceClientEndpointsCreatePaymentMethod { headers: RootServicesCommerceClientEndpointsCreatePaymentMethodHeaders { accept: "application/json", authorization: "{accessToken}", content_type: "application/json" }, href: "https://qa.us.edge.bamgrid.com/tokens/sps", method: "POST", templated: false, timeout: 15, ttl: 0 }, get_default_payment_method: RootServicesCommerceClientEndpointsGetDefaultPaymentMethod { headers: RootServicesCommerceClientEndpointsGetDefaultPaymentMethodHeaders { accept: "application/json", authorization: "Bearer {accessToken}" }, href: "https://qa.us.edge.bamgrid.com/wallet/payment-methods/default", method: "GET", templated: false, timeout: 15, ttl: 0 }, get_order_status: RootServicesCommerceClientEndpointsGetOrderStatus { headers: RootServicesCommerceClientEndpointsGetOrderStatusHeaders { accept: "application/json", authorization: "Bearer {accessToken}" }, href: "https://qa.us.edge.bamgrid.com/v2/orders/{guid}", method: "GET", templated: true, timeout: 15, ttl: 0 }, get_pay_pal_express: RootServicesCommerceClientEndpointsGetPayPalExpress { headers: RootServicesCommerceClientEndpointsGetPayPalExpressHeaders { accept: "application/json", authorization: "Bearer {accessToken}" }, href: "https://qa.us.edge.bamgrid.com/wallet/paypal-express/{paymentMethodId}", method: "GET", templated: true, timeout: 15, ttl: 0 }, get_payment_card: RootServicesCommerceClientEndpointsGetPaymentCard { headers: RootServicesCommerceClientEndpointsGetPaymentCardHeaders { accept: "application/json", authorization: "Bearer {accessToken}" }, href: "https://qa.us.edge.bamgrid.com/wallet/payment-methods/{paymentMethodId}", method: "GET", templated: true, timeout: 15, ttl: 0 }, list_payment_cards: RootServicesCommerceClientEndpointsListPaymentCards { headers: RootServicesCommerceClientEndpointsListPaymentCardsHeaders { accept: "application/json", authorization: "Bearer {accessToken}" }, href: "https://qa.us.edge.bamgrid.com/wallet/payment-cards", method: "GET", templated: false, timeout: 15, ttl: 0 }, lookup_by_zip_code: RootServicesCommerceClientEndpointsLookupByZipCode { headers: RootServicesCommerceClientEndpointsLookupByZipCodeHeaders { accept: "application/json" }, href: "https://s3.amazonaws.com/skynet-dss-commerce-zipcode/fed-web-app/assets/resources/zipcodes/{zipcode}.json", method: "GET", templated: true, timeout: 15, ttl: 0 }, price_order: RootServicesCommerceClientEndpointsPriceOrder { headers: RootServicesCommerceClientEndpointsPriceOrderHeaders { accept: "application/json", authorization: "Bearer {accessToken}", content_type: "application/vnd.pes-v3.0+json" }, href: "https://qa.us.edge.bamgrid.com/priceOrder", method: "POST", templated: false, timeout: 15, ttl: 0 }, redeem: RootServicesCommerceClientEndpointsRedeem { headers: RootServicesCommerceClientEndpointsRedeemHeaders { accept: "application/json", authorization: "Bearer {accessToken}", content_type: "application/json" }, href: "https://qa.us.edge.bamgrid.com/redeem", method: "POST", templated: false, timeout: 15, ttl: 0 }, resume_account: RootServicesCommerceClientEndpointsResumeAccount { headers: RootServicesCommerceClientEndpointsResumeAccountHeaders { accept: "application/json", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/v2/order/resume", method: "POST", templated: false, timeout: 15, ttl: 0 }, set_pay_pal_express_checkout_details: RootServicesCommerceClientEndpointsSetPayPalExpressCheckoutDetails { headers: RootServicesCommerceClientEndpointsSetPayPalExpressCheckoutDetailsHeaders { accept: "application/json", authorization: "Bearer {accessToken}" }, href: "https://qa.us.edge.bamgrid.com/paypalToken", method: "POST", templated: false, timeout: 15, ttl: 0 }, submit_order_with_payment_method: RootServicesCommerceClientEndpointsSubmitOrderWithPaymentMethod { headers: RootServicesCommerceClientEndpointsSubmitOrderWithPaymentMethodHeaders { accept: "application/json", authorization: "Bearer {accessToken}", content_type: "application/json" }, href: "https://qa.us.edge.bamgrid.com/v2/order", method: "POST", templated: false, timeout: 15, ttl: 0 }, update_payment_card: RootServicesCommerceClientEndpointsUpdatePaymentCard { headers: RootServicesCommerceClientEndpointsUpdatePaymentCardHeaders { accept: "application/json", authorization: "Bearer {accessToken}" }, href: "https://qa.us.edge.bamgrid.com/wallet/payment-cards/{paymentMethodId}", method: "PATCH", templated: true, timeout: 15, ttl: 0 } }, extras: RootServicesCommerceClientExtras { client_id: "launchpad", create_payment_method_regional_endpoints: RootServicesCommerceClientExtrasCreatePaymentMethodRegionalEndpoints, namespace: "launchpad", namespace_id: 0 } }, extras: RootServicesCommerceExtras { check_order_status_delay: 4, retry_policy: RootServicesCommerceExtrasRetryPolicy { retry_base_period: 2, retry_max_attempts: 48, retry_max_period: 2, retry_multiplier: 1 } } }, content: RootServicesContent { client: RootServicesContentClient { base_url: "https://search-api-launchpad-qa.bamgrid.com", endpoints: RootServicesContentClientEndpoints { bookmarks: RootServicesContentClientEndpointsBookmarks { headers: RootServicesContentClientEndpointsBookmarksHeaders { accept: "application/json", authorization: "Bearer {accessToken}", content_type: "application/json" }, href: "https://search-api-launchpad-qa.bamgrid.com/svc/search/v2/graphql", method: "GET", templated: false, timeout: 15, ttl: 0 }, bookmarks_persisted: RootServicesContentClientEndpointsBookmarksPersisted { headers: RootServicesContentClientEndpointsBookmarksPersistedHeaders { accept: "application/json", authorization: "Bearer {accessToken}", content_type: "application/json" }, href: "https://search-api-launchpad-qa.bamgrid.com/svc/search/v2/graphql/persisted/query/{queryId}", method: "GET", templated: true, timeout: 15, ttl: 0 }, dmc_videos: RootServicesContentClientEndpointsDmcVideos { headers: RootServicesContentClientEndpointsDmcVideosHeaders { accept: "application/json", authorization: "Bearer {accessToken}", content_type: "application/json" }, href: "https://search-api-launchpad-qa.bamgrid.com/svc/search/v2/graphql/persisted/query/{queryId}", method: "GET", templated: true, timeout: 15, ttl: 0 }, search: RootServicesContentClientEndpointsSearch { headers: RootServicesContentClientEndpointsSearchHeaders { accept: "application/json", authorization: "Bearer {accessToken}", content_type: "application/json" }, href: "https://search-api-launchpad-qa.bamgrid.com/svc/search/v2/graphql", method: "GET", templated: false, timeout: 15, ttl: 0 }, search_persisted: RootServicesContentClientEndpointsSearchPersisted { headers: RootServicesContentClientEndpointsSearchPersistedHeaders { accept: "application/json", authorization: "Bearer {accessToken}", content_type: "application/json" }, href: "https://search-api-launchpad-qa.bamgrid.com/svc/search/v2/graphql/persisted/query/{queryId}", method: "GET", templated: true, timeout: 15, ttl: 0 }, search_suggestions: RootServicesContentClientEndpointsSearchSuggestions { headers: RootServicesContentClientEndpointsSearchSuggestionsHeaders { accept: "application/json", content_type: "application/json" }, href: "https://search-api-launchpad-qa.bamgrid.com/svc/suggest/v1/{dictionary}/{query}", method: "GET", templated: true, timeout: 15, ttl: 0 }, sports_data: RootServicesContentClientEndpointsSportsData { headers: RootServicesContentClientEndpointsSportsDataHeaders { accept: "application/json", authorization: "Bearer {accessToken}", content_type: "application/json" }, href: "", method: "GET", templated: false, timeout: 15, ttl: 0 }, watchlist: RootServicesContentClientEndpointsWatchlist { headers: RootServicesContentClientEndpointsWatchlistHeaders { accept: "application/json", authorization: "Bearer {accessToken}", content_type: "application/json" }, href: "https://search-api-launchpad-qa.bamgrid.com/svc/search/v2/graphql", method: "GET", templated: false, timeout: 15, ttl: 0 }, watchlist_persisted: RootServicesContentClientEndpointsWatchlistPersisted { headers: RootServicesContentClientEndpointsWatchlistPersistedHeaders { accept: "application/json", authorization: "Bearer {accessToken}", content_type: "application/json" }, href: "https://search-api-launchpad-qa.bamgrid.com/svc/search/v2/graphql/persisted/query/{queryId}", method: "GET", templated: true, timeout: 15, ttl: 0 } }, extras: RootServicesContentClientExtras { url_size_limit: 8192 } }, extras: RootServicesContentExtras { query_id_defaults: RootServicesContentExtrasQueryIdDefaults { add_to_watchlist: "core/AddToWatchlist", clear_watchlist: "core/ClearWatchlist", remove_from_watchlist: "core/DeleteFromWatchlist" } } }, customer_service: RootServicesCustomerService { client: RootServicesCustomerServiceClient { base_url: "https://qa.us.edge.bamgrid.com", endpoints: RootServicesCustomerServiceClientEndpoints { create_support_code: RootServicesCustomerServiceClientEndpointsCreateSupportCode { headers: RootServicesCustomerServiceClientEndpointsCreateSupportCodeHeaders { accept: "text/plain", authorization: "Bearer {accessToken}" }, href: "https://qa.us.edge.bamgrid.com/customer-service/codes", method: "POST", templated: false, timeout: 15, ttl: 0 } } } }, device: RootServicesDevice { client: RootServicesDeviceClient { base_url: "https://qa.us.edge.bamgrid.com", endpoints: RootServicesDeviceClientEndpoints { create_device_grant: RootServicesDeviceClientEndpointsCreateDeviceGrant { headers: RootServicesDeviceClientEndpointsCreateDeviceGrantHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {apiKey}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/devices", method: "POST", templated: false, timeout: 15, ttl: 0 } } } }, drm: RootServicesDrm { client: RootServicesDrmClient { base_url: "https://qa.us.edge.bamgrid.com/", endpoints: RootServicesDrmClientEndpoints { fair_play_certificate: RootServicesDrmClientEndpointsFairPlayCertificate { headers: RootServicesDrmClientEndpointsFairPlayCertificateHeaders { authorization: "Bearer {accessToken}" }, href: "https://playback-certs.bamgrid.com/static/v1.0/fairplay.cer", method: "GET", templated: false, timeout: 15, ttl: 0 }, fair_play_license: RootServicesDrmClientEndpointsFairPlayLicense { headers: RootServicesDrmClientEndpointsFairPlayLicenseHeaders { accept: "application/octet-stream", authorization: "Bearer {accessToken}", content_type: "application/octet-stream" }, href: "https://qa.us.edge.bamgrid.com/fairplay/v1/obtain-license", method: "POST", templated: false, timeout: 15, ttl: 0 }, nagra_certificate: RootServicesDrmClientEndpointsNagraCertificate { headers: RootServicesDrmClientEndpointsNagraCertificateHeaders { authorization: "Bearer {accessToken}" }, href: "https://playback-certs.bamgrid.com/static/v1.0/disney/nagra-beta.json", method: "GET", templated: false, timeout: 15, ttl: 0 }, nagra_license: RootServicesDrmClientEndpointsNagraLicense { headers: RootServicesDrmClientEndpointsNagraLicenseHeaders { accept: "application/json", authorization: "Bearer {accessToken}", content_type: "application/json" }, href: "https://qa.us.edge.bamgrid.com/nagra/v1/obtain-license", method: "POST", templated: false, timeout: 15, ttl: 0 }, offline_fair_play_license: RootServicesDrmClientEndpointsOfflineFairPlayLicense { headers: RootServicesDrmClientEndpointsOfflineFairPlayLicenseHeaders { accept: "application/octet-stream", authorization: "Bearer {accessToken}", content_type: "application/octet-stream" }, href: "https://qa.us.edge.bamgrid.com/fairplay/v1/obtain-offline-license", method: "POST", templated: false, timeout: 15, ttl: 0 }, offline_fair_play_license_release: RootServicesDrmClientEndpointsOfflineFairPlayLicenseRelease { headers: RootServicesDrmClientEndpointsOfflineFairPlayLicenseReleaseHeaders { accept: "application/octet-stream", authorization: "Bearer {accessToken}", content_type: "application/octet-stream" }, href: "https://qa.us.edge.bamgrid.com/fairplay/v1/release-offline-license", method: "POST", templated: false, timeout: 15, ttl: 0 }, offline_fair_play_license_renew: RootServicesDrmClientEndpointsOfflineFairPlayLicenseRenew { headers: RootServicesDrmClientEndpointsOfflineFairPlayLicenseRenewHeaders { accept: "application/octet-stream", authorization: "Bearer {accessToken}", content_type: "application/octet-stream" }, href: "https://qa.us.edge.bamgrid.com/fairplay/v1/renew-offline-license", method: "POST", templated: false, timeout: 15, ttl: 0 }, offline_widevine_license: RootServicesDrmClientEndpointsOfflineWidevineLicense { headers: RootServicesDrmClientEndpointsOfflineWidevineLicenseHeaders { authorization: "Bearer {accessToken}", content_type: "application/octet-stream" }, href: "https://qa.us.edge.bamgrid.com/widevine/v1/obtain-offline-license", method: "POST", templated: false, timeout: 15, ttl: 0 }, offline_widevine_license_release: RootServicesDrmClientEndpointsOfflineWidevineLicenseRelease { headers: RootServicesDrmClientEndpointsOfflineWidevineLicenseReleaseHeaders { authorization: "Bearer {accessToken}", content_type: "application/octet-stream" }, href: "https://qa.us.edge.bamgrid.com/widevine/v1/release-offline-license", method: "POST", templated: false, timeout: 15, ttl: 0 }, offline_widevine_license_renew: RootServicesDrmClientEndpointsOfflineWidevineLicenseRenew { headers: RootServicesDrmClientEndpointsOfflineWidevineLicenseRenewHeaders { authorization: "Bearer {accessToken}", content_type: "application/octet-stream" }, href: "https://qa.us.edge.bamgrid.com/widevine/v1/renew-offline-license", method: "POST", templated: false, timeout: 15, ttl: 0 }, play_ready_license: RootServicesDrmClientEndpointsPlayReadyLicense { headers: RootServicesDrmClientEndpointsPlayReadyLicenseHeaders { accept: "application/xml, application/vnd.media-service+json; version=2", authorization: "Bearer {accessToken}", content_type: "text/xml; charset=utf-8", soapaction: "http://schemas.microsoft.com/DRM/2007/03/protocols/AcquireLicense" }, href: "https://qa.us.edge.bamgrid.com/playready/v1/obtain-license.asmx?SL=150", method: "POST", templated: false, timeout: 15, ttl: 0 }, silk_key: RootServicesDrmClientEndpointsSilkKey { headers: RootServicesDrmClientEndpointsSilkKeyHeaders { accept: "application/octet-stream, application/vnd.media-service+json; version=2", authorization: "{accessToken}" }, href: "", method: "GET", templated: false, timeout: 15, ttl: 0 }, widevine_certificate: RootServicesDrmClientEndpointsWidevineCertificate { headers: RootServicesDrmClientEndpointsWidevineCertificateHeaders { authorization: "Bearer {accessToken}" }, href: "https://playback-certs.bamgrid.com/static/v1.0/widevine_qa.bin", method: "GET", templated: false, timeout: 15, ttl: 0 }, widevine_license: RootServicesDrmClientEndpointsWidevineLicense { headers: RootServicesDrmClientEndpointsWidevineLicenseHeaders { authorization: "Bearer {accessToken}", content_type: "application/octet-stream" }, href: "https://qa.us.edge.bamgrid.com/widevine/v1/obtain-license", method: "POST", templated: false, timeout: 15, ttl: 0 } } } }, eligibility: RootServicesEligibility { client: RootServicesEligibilityClient { base_url: "", endpoints: RootServicesEligibilityClientEndpoints { get_eligibility_status: RootServicesEligibilityClientEndpointsGetEligibilityStatus { headers: RootServicesEligibilityClientEndpointsGetEligibilityStatusHeaders { accept: "application/json", authorization: "{accessToken}", content_type: "application/json" }, href: "", method: "GET", templated: false, timeout: 15, ttl: 0 } } } }, external_activation: RootServicesExternalActivation { client: RootServicesExternalActivationClient { base_url: "", endpoints: RootServicesExternalActivationClientEndpoints { activate_bundle: RootServicesExternalActivationClientEndpointsActivateBundle { headers: RootServicesExternalActivationClientEndpointsActivateBundleHeaders { accept: "application/json", authorization: "{accessToken}", content_type: "application/json" }, href: "", method: "POST", templated: true, timeout: 15, ttl: 0 }, activate_token: RootServicesExternalActivationClientEndpointsActivateToken { headers: RootServicesExternalActivationClientEndpointsActivateTokenHeaders { accept: "application/json", authorization: "{accessToken}", content_type: "application/json" }, href: "", method: "POST", templated: true, timeout: 15, ttl: 0 }, get_activation_token: RootServicesExternalActivationClientEndpointsGetActivationToken { headers: RootServicesExternalActivationClientEndpointsGetActivationTokenHeaders { accept: "application/json", authorization: "{accessToken}", content_type: "application/json" }, href: "", method: "GET", templated: true, timeout: 15, ttl: 0 } } } }, media: RootServicesMedia { client: RootServicesMediaClient { base_url: "https://qa.us.edge.bamgrid.com", endpoints: RootServicesMediaClientEndpoints { bif_thumbnail: RootServicesMediaClientEndpointsBifThumbnail { headers: RootServicesMediaClientEndpointsBifThumbnailHeaders, href: "", method: "GET", templated: false, timeout: 15, ttl: 0 }, bif_thumbnails: RootServicesMediaClientEndpointsBifThumbnails { headers: RootServicesMediaClientEndpointsBifThumbnailsHeaders { authorization: "{accessToken}" }, href: "", method: "GET", templated: false, timeout: 15, ttl: 0 }, bookmarks: RootServicesMediaClientEndpointsBookmarks { headers: RootServicesMediaClientEndpointsBookmarksHeaders { accept: "application/vnd.bookmark-read-service+json; version=1", authorization: "{accessToken}" }, href: "https://qa.us.edge.bamgrid.com/content/{contentId}/bookmark", method: "GET", templated: true, timeout: 15, ttl: 0 }, key: RootServicesMediaClientEndpointsKey { headers: RootServicesMediaClientEndpointsKeyHeaders { accept: "application/octet-stream, application/vnd.media-service+json; version=2", authorization: "{accessToken}" }, href: "", method: "GET", templated: false, timeout: 15, ttl: 0 }, media_payload: RootServicesMediaClientEndpointsMediaPayload { headers: RootServicesMediaClientEndpointsMediaPayloadHeaders { accept: "application/vnd.media-service+json; version=2", authorization: "{accessToken}" }, href: "", method: "GET", templated: true, timeout: 15, ttl: 0 }, playback_cookie: RootServicesMediaClientEndpointsPlaybackCookie { headers: RootServicesMediaClientEndpointsPlaybackCookieHeaders { authorization: "{accessToken}" }, href: "https://qa.us.edge.bamgrid.com/playback/cookie", method: "GET", templated: false, timeout: 15, ttl: 0 }, sprite_sheet_thumbnail: RootServicesMediaClientEndpointsSpriteSheetThumbnail { headers: RootServicesMediaClientEndpointsSpriteSheetThumbnailHeaders, href: "", method: "GET", templated: false, timeout: 15, ttl: 0 }, sprite_sheet_thumbnails: RootServicesMediaClientEndpointsSpriteSheetThumbnails { headers: RootServicesMediaClientEndpointsSpriteSheetThumbnailsHeaders { authorization: "{accessToken}" }, href: "", method: "GET", templated: false, timeout: 15, ttl: 0 } } }, extras: RootServicesMediaExtras { is_uhd_allowed: false, playback_scenario_default: "restricted-drm-ctr-sw", playback_scenarios: RootServicesMediaExtrasPlaybackScenarios, playback_session: RootServicesMediaExtrasPlaybackSession { stream_sample_interval: 15 } } }, paywall: RootServicesPaywall { client: RootServicesPaywallClient { base_url: "", endpoints: RootServicesPaywallClientEndpoints { paywall: RootServicesPaywallClientEndpointsPaywall { headers: RootServicesPaywallClientEndpointsPaywallHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "", method: "GET", templated: false, timeout: 15, ttl: 0 } } } }, purchase: RootServicesPurchase { client: RootServicesPurchaseClient { base_url: "https://qa.us.edge.bamgrid.com", endpoints: RootServicesPurchaseClientEndpoints { redeem_purchases: RootServicesPurchaseClientEndpointsRedeemPurchases { headers: RootServicesPurchaseClientEndpointsRedeemPurchasesHeaders { accept: "application/json; profile=vnd.bamtech.activation; version=1", authorization: "Bearer {accessToken}", content_type: "application/json; profile=vnd.bamtech.receipt; version=1" }, href: "https://qa.us.edge.bamgrid.com/stores/{store}/purchases", method: "POST", templated: true, timeout: 15, ttl: 0 }, restore_purchases: RootServicesPurchaseClientEndpointsRestorePurchases { headers: RootServicesPurchaseClientEndpointsRestorePurchasesHeaders { accept: "application/json; profile=vnd.bamtech.activation; version=1", authorization: "Bearer {accessToken}", content_type: "application/json; profile=vnd.bamtech.receipt; version=1" }, href: "https://qa.us.edge.bamgrid.com/stores/{store}/restorations", method: "POST", templated: true, timeout: 15, ttl: 0 } } }, extras: RootServicesPurchaseExtras { retry_policy: RootServicesPurchaseExtrasRetryPolicy { retry_base_period: 5, retry_max_attempts: 30, retry_max_period: 900, retry_multiplier: 1.6 } } }, push_messaging: RootServicesPushMessaging { client: RootServicesPushMessagingClient { base_url: "https://qa.us.edge.bamgrid.com", endpoints: RootServicesPushMessagingClientEndpoints { register_channel: RootServicesPushMessagingClientEndpointsRegisterChannel { headers: RootServicesPushMessagingClientEndpointsRegisterChannelHeaders { authorization: "{accessToken}", x_bamtech_app_id: "launchpad" }, href: "https://qa.us.edge.bamgrid.com/v1/push-channels/{pushChannelId}", method: "PUT", templated: true, timeout: 15, ttl: 0 } } } }, session: RootServicesSession { client: RootServicesSessionClient { base_url: "https://qa.us.edge.bamgrid.com", endpoints: RootServicesSessionClientEndpoints { get_info: RootServicesSessionClientEndpointsGetInfo { headers: RootServicesSessionClientEndpointsGetInfoHeaders { accept: "application/vnd.session-service+json; version=1", authorization: "{accessToken}", content_type: "application/json" }, href: "https://qa.us.edge.bamgrid.com/session", method: "GET", templated: false, timeout: 15, ttl: 0 }, get_location: RootServicesSessionClientEndpointsGetLocation { headers: RootServicesSessionClientEndpointsGetLocationHeaders { accept: "application/vnd.session-service+json; version=1", authorization: "{accessToken}", content_type: "application/json" }, href: "https://qa.us.edge.bamgrid.com/sessions/me/location", method: "GET", templated: false, timeout: 15, ttl: 0 } } } }, sockets: RootServicesSockets { client: RootServicesSocketsClient { base_url: "wss://qa.global.edge.bamgrid.com", endpoints: RootServicesSocketsClientEndpoints { socket_connection_eu_west_one: RootServicesSocketsClientEndpointsSocketConnectionEuWestOne { href: "wss://qa.global.edge.bamgrid.com/dfcc3f/connection", method: "GET", templated: false, timeout: 15, ttl: 0 }, socket_connection_us_east_one: RootServicesSocketsClientEndpointsSocketConnectionUsEastOne { href: "wss://qa.global.edge.bamgrid.com/c800b6/connection", method: "GET", templated: false, timeout: 15, ttl: 0 }, socket_connection_us_west_two: RootServicesSocketsClientEndpointsSocketConnectionUsWestTwo { href: "wss://qa.global.edge.bamgrid.com/66990c/connection", method: "GET", templated: false, timeout: 15, ttl: 0 } }, extras: RootServicesSocketsClientExtras { protocol_headers: RootServicesSocketsClientExtrasProtocolHeaders { json: "vnd.dss.edge+json", protobuf: "vnd.dss.edge+protobuf" }, regional_endpoint_mapping: RootServicesSocketsClientExtrasRegionalEndpointMapping { eu_west_1: "socketConnectionEuWestOne", us_east_1: "socketConnectionUsEastOne", us_west_2: "socketConnectionUsWestTwo" }, supported_protocols: [] } }, disabled: true, extras: RootServicesSocketsExtras { retry_policy: RootServicesSocketsExtrasRetryPolicy { retry_base_period: 5, retry_max_attempts: 3, retry_max_period: 900, retry_multiplier: 1.6 } } }, subscription: RootServicesSubscription { client: RootServicesSubscriptionClient { base_url: "https://qa.us.edge.bamgrid.com", endpoints: RootServicesSubscriptionClientEndpoints { get_subscriptions: RootServicesSubscriptionClientEndpointsGetSubscriptions { headers: RootServicesSubscriptionClientEndpointsGetSubscriptionsHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/subscriptions", method: "GET", templated: false, timeout: 15, ttl: 0 }, link_subscriptions_from_device: RootServicesSubscriptionClientEndpointsLinkSubscriptionsFromDevice { headers: RootServicesSubscriptionClientEndpointsLinkSubscriptionsFromDeviceHeaders { accept: "application/json; charset=utf-8", authorization: "Bearer {accessToken}", content_type: "application/json; charset=utf-8" }, href: "https://qa.us.edge.bamgrid.com/subscriptions/copy/device", method: "POST", templated: false, timeout: 15, ttl: 0 } } } }, telemetry: RootServicesTelemetry { client: RootServicesTelemetryClient { base_url: "https://qa.us.edge.bamgrid.com", endpoints: RootServicesTelemetryClientEndpoints { dust_event: RootServicesTelemetryClientEndpointsDustEvent { headers: RootServicesTelemetryClientEndpointsDustEventHeaders { authorization: "{accessToken}", content_type: "application/json; event=\"urn:bamtech:api:batch\"; version=1" }, href: "https://qa.us.edge.bamgrid.com/dust", method: "POST", templated: false, timeout: 15, ttl: 0 }, post_event: RootServicesTelemetryClientEndpointsPostEvent { headers: RootServicesTelemetryClientEndpointsPostEventHeaders { authorization: "{accessToken}", content_type: "application/json; event=\"urn:bamtech:api:batch\"; version=1" }, href: "https://qa.us.edge.bamgrid.com/telemetry", method: "POST", templated: false, timeout: 15, ttl: 0 } } }, disabled: true, extras: RootServicesTelemetryExtras { batch_limit: 20, buffer_configuration_default: RootServicesTelemetryExtrasBufferConfigurationDefault { batch_limit: 20, disabled: true, minimum_batch_size: 10, reply_after_fallback: 30 }, event_buffer_configuration: RootServicesTelemetryExtrasEventBufferConfiguration { batch_limit: 20, disabled: false, minimum_batch_size: 10, reply_after_fallback: 30 }, fast_track: RootServicesTelemetryExtrasFastTrack { urns: ["urn:dss:glimpse:event:app-lifecycle:app-launched", "urn:dss:telemetry-service:event:stream-sample", "urn:bamtech:api:stream-sample", "urn:dss:glimpse:event:track-state:eligibility-timeout-occurred"] }, permit_app_dust_events: false, prohibited: RootServicesTelemetryExtrasProhibited { urns: [] }, reply_after_fallback: 30 } }, token: RootServicesToken { client: RootServicesTokenClient { base_url: "https://qa.us.edge.bamgrid.com", endpoints: RootServicesTokenClientEndpoints { exchange: RootServicesTokenClientEndpointsExchange { headers: RootServicesTokenClientEndpointsExchangeHeaders { accept: "application/json", authorization: "Bearer {apiKey}", content_type: "application/x-www-form-urlencoded" }, href: "https://qa.us.edge.bamgrid.com/token", method: "POST", templated: false, timeout: 15, ttl: 0 } }, extras: RootServicesTokenClientExtras { platform_id: "rust" }, platform_id: "" }, extras: RootServicesTokenExtras { auto_refresh_retry_policy: RootServicesTokenExtrasAutoRefreshRetryPolicy { retry_base_period: 2, retry_max_attempts: 20, retry_max_period: 120, retry_multiplier: 1.5 }, refresh_threshold: 0.9, subject_token_types: RootServicesTokenExtrasSubjectTokenTypes { account: "urn:bamtech:params:oauth:token-type:account", device: "urn:bamtech:params:oauth:token-type:device", temporary: "urn:ietf:params:oauth:token-type:jwt" } } } } })